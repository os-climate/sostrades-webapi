//this template contains all information on configuration of sostradesweb API in local execution
{
  // Environment type for the application. Mainly used to change logging level and to restrict some feature.
  // ‘PRODUCTION’, ‘DEVEOPMENT’ and ‘UNIT_TEST’ are the taking into account values
  "ENVIRONMENT": "DEVELOPMENT",

  // Application data are stored in MySQL database using python SqlAchemy ORM
  "SQL_ALCHEMY_DATABASE": {
    "CONNECT_ARGS": {
      // "ssl":true
      // "charset": "utf8mb4"
    },
    "URI": "sqlite:///my-path-to/sostrades-data.db", // connection uri for database, can be sqlite:///path_to_file or mysql+mysqldb://{USER}:{PASSWORD}@HOST:PORT/sostrades-data
    "URI_ENV_VARS" : { // used to configure uri with environment variable
      // "USER": "SQL_ACCOUNT"
      // "PASSWORD": "SQL_PASSWORD"
    }
  },
  // Enable signals to get notified before and after changes are committed to the database.
  // Set to False (for performance reason)
  "SQLALCHEMY_TRACK_MODIFICATIONS": false,

  // Logging data are stored in a separated database.
  // This database is not access using the ORM, the following information must be set:
  "LOGGING_DATABASE": {
    "CONNECT_ARGS": {
      // "ssl":true
      // "charset": "utf8mb4"
    },
    "URI": "sqlite:///my-path-to/sostrades-log.db", // connection uri for database, can be sqlite:///path_to_file or mysql+mysqldb://{USER}:{PASSWORD}@HOST:PORT/sostrades-log
    "URI_ENV_VARS" : { // used to configure uri with environment variable
      // "USER": "LOG_USER"
      // "PASSWORD": "LOG_PASSWORD"
    }
  },

  // Token management section
  // flask-jwt-extended library configuration
  //--------------------------------------------------------------
  // name of the environment variable that will store the secret key
  "SECRET_KEY_ENV_VAR": "SECRET_KEY",
  // Where to look for a JWT when processing a request.
  // The available options are "headers", "cookies", "query_string", and "json"
  "JWT_TOKEN_LOCATION": "headers",
  // How long an access token should be valid before it expires (in seconds)
  "JWT_ACCESS_TOKEN_EXPIRES": 18000,
  // How long a refresh token should be valid before it expires (in seconds)
  "JWT_REFRESH_TOKEN_EXPIRES": 36000,
  //--------------------------------------------------------------

  // SoSTrades user account that will be created by default,
  // and on which all SoSTrades processes will be attached (mainly used for development and validation environment),
  // can be let empty
  "DEFAULT_GROUP_MANAGER_ACCOUNT": "SoSTrades_Dev",

  // Boolean to know if  test account has to be created the first time the application is launched
  "CREATE_STANDARD_USER_ACCOUNT": true,

  // LDAP server url
  "LDAP_SERVER" : "",
  //Base request to access LDAP, for exemple "OU=Persons,DC=eu,DC=corp"
  "LDAP_BASE_DN" : "",
  //Request filter, for exemple: "userPrincipalName=%s@eu.corp" with ‚"%s" set to the username that is currently trying to logged in
  "LDAP_FILTER" : "",
  // Formatted string to build username for exemple: "%s@eu.corp"
  "LDAP_USERNAME" : "",

  //SMTP server address used to send email for platform access
  "SMTP_SERVER" : "",
  //Platform support email address
  "SMTP_SOS_TRADES_ADDR" : "",

  // Name of application environment version
  "SOS_TRADES_ENVIRONMENT" : "Local",
  // SoSTrades API backend address from inside the cluster
  "SOS_TRADES_K8S_DNS": "",
  // Public IP of the front-end application that use the current API server
  "SOS_TRADES_FRONT_END_DNS": "",

  // Endpoint of the Ontology server
  "SOS_TRADES_ONTOLOGY_ENDPOINT": "",

  // List of additional modules to check for processes.
  "SOS_TRADES_PROCESS_REPOSITORY": ["sostrades_core.sos_processes.test"],

  // Absolute path to the SSL certificate to communicate with the ontology server
  "INTERNAL_SSL_CERTIFICATE": "",
  "SOS_TRADES_EXECUTION_STRATEGY": "subprocess",
  "SOS_TRADES_SERVER_MODE": "mono",
  "SOS_TRADES_DATA": "/sostdata",
  "SOS_TRADES_REFERENCES": "/sostdata/references",
  "EEB_PATH": "/config/conf/eeb.yaml",
  "SOS_TRADES_RSA": "/config/rsa-key-pair/",
  "SAML_V2_METADATA_FOLDER": "/config/saml-v2/",

  //Only used in "kubernetes" SOS_TRADES_SERVER_MODE
  // Path to a local directory in the pod
  "SOS_TRADES_LOCAL_FOLDER": "/tmp",
  //delay to desactivate inactive study pod
  "SOS_TRADES_STUDY_POD_INACTIVATE_DELAY_HOUR": 10,
  // define kubernetes flavors types you need to choose to load pod
  "CONFIG_FLAVOR_KUBERNETES": {
    "PodStudy":{
      "Small": {
        "requests": {
          "memory":"502Mi",
          "cpu": "200m"
        },
        "limits": {
          "memory":"502Mi",
          "cpu": "1"
        }
      },
      "Medium": {
        "requests": {
          "memory":"1Gi",
          "cpu": "200m"
        },
        "limits": {
          "memory":"1Gi",
          "cpu": "1"
        }
      },
      "Large": {
        "requests": {
          "memory":"2Gi",
          "cpu": "1"
        },
        "limits": {
          "memory":"2Gi",
          "cpu": "1"
        }
      }
    },
    "PodExec":{
      "Small": {
        "requests": {
          "memory":"502Mi",
          "cpu": "200m"
        },
        "limits": {
          "memory":"502Mi",
          "cpu": "1"
        }
      },
      "Medium": {
        "requests": {
          "memory":"1Gi",
          "cpu": "200m"
        },
        "limits": {
          "memory":"1Gi",
          "cpu": "1"
        }
      },
      "Large": {
        "requests": {
          "memory":"2Gi",
          "cpu": "1"
        },
        "limits": {
          "memory":"2Gi",
          "cpu": "1"
        }
      },
      "XtraLarge": {
        "requests": {
          "memory":"12Gi",
          "cpu": "2"
        },
        "limits": {
          "memory":"12Gi",
          "cpu": "2"
        }
      }
    }
  }

}
